#include <Arduino.h>
#include <WiFi.h>

#include "Config.h"
#include "BLEAuth.h"
#include "ServoLock.h"
#include "TelegramBot.h"

BLEAuth        bleAuth;
ServoLock      lock;
TelegramNotifier telegram;

bool prevAuth   = false;
bool deviceSent = false;

void setup() {
  Serial.begin(115200);
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Wi-Fi
  WiFi.begin(WIFI_SSID, WIFI_PASS);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.println("\n‚úÖ Wi-Fi –ø–æ–¥–∫–ª—é—á—ë–Ω!");

  bleAuth.begin();
  lock.begin();
  telegram.begin();

  // –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  telegram.send_message("–ü—Ä–∏–≤–µ—Ç –æ—Ç ESP32!");  
}

void loop() {
  bleAuth.update();
  bool currAuth = bleAuth.isAuthorized();

  // –ü–æ—è–≤–∏–ª–æ—Å—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
  if (currAuth && !prevAuth) {
    lock.open();
    Serial.println("üîì –ó–∞–º–æ–∫ –æ—Ç–∫—Ä—ã—Ç");
    if (!deviceSent) {
      telegram.send_message("üîì –ó–∞–º–æ–∫ –æ—Ç–∫—Ä—ã—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º");
      deviceSent = true;
    }
  }
  // –ò—Å—á–µ–∑–ª–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
  else if (!currAuth && prevAuth) {
    lock.close();
    Serial.println("üîí –ó–∞–º–æ–∫ –∑–∞–∫—Ä—ã—Ç");
    deviceSent = false;
  }

  prevAuth = currAuth;
  delay(100);
}
