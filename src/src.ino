#include <WiFi.h>
#include <AsyncTCP.h>
#include <HTTPClient.h>
#include <ESPAsyncWebServer.h>

#include "Config.h"
#include "BLEAuth.h"
#include "ServoLock.h"
#include "MotionSensor.h"

AsyncWebServer server(80);

BLEAuth          bleAuth;
ServoLock        lock;
MotionSensor     motionSensor;

bool prevAuth   = false;
bool deviceSent = false;

void send_to_server(String event) {
  WiFiClient client;
  HTTPClient http;  
  
  http.begin("http://172.20.10.2:5000/notify");  
  http.addHeader("Content-Type", "application/json");
  
  if (event == "open") {
    http.POST("{\"event\": \"open\"}");
  } else if (event == "close") {
    http.POST("{\"event\": \"close\"}");
  } else if (event == "motion") {
    http.POST("{\"event\": \"motion\"}");
  }

  http.end();
}

void handle_command(String action) {
  if (action == "open") lock.open();
  if (action == "close") lock.close();
}

void setup() {
  Serial.begin(115200);
  delay(1000); // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Serial

  WiFi.begin(WIFI_SSID, WIFI_PASS);
  Serial.println("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Wi-Fi: " + String(WIFI_SSID));

  unsigned long startTime = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - startTime < 20000) { // –¢–∞–π–º–∞—É—Ç 20 —Å–µ–∫
    delay(500);
    Serial.print(".");
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ! IP");
    Serial.println("–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: " + String(WiFi.RSSI()) + " dBm");
  } else {
    Serial.println("\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è! –°—Ç–∞—Ç—É—Å: " + String(WiFi.status()));
    Serial.println("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ: SSID, –ø–∞—Ä–æ–ª—å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞.");
  }

  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(200, "text/plain", "ESP32 Ready");
});

  
  server.on("/command", HTTP_POST, [](AsyncWebServerRequest *request){
    if(request->hasParam("action")) {
      handle_command(request->getParam("action")->value());
    }
    request->send(200);
  });

  server.begin();
  bleAuth.begin();
  lock.begin();
  motionSensor.begin();
}

void loop() 
{
  bleAuth.update();
  bool currAuth = bleAuth.isAuthorized();

        if (currAuth && !prevAuth) {
            lock.open();
            Serial.println("üîì –ó–∞–º–æ–∫ –æ—Ç–∫—Ä—ã—Ç");
            send_to_server("open");
        }
        // –†–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏—Å—á–µ–∑–ª–æ
        else if (!currAuth && prevAuth) {
            lock.close();
            Serial.println("üîí –ó–∞–º–æ–∫ –∑–∞–∫—Ä—ã—Ç");
            send_to_server("close");
        }

  prevAuth = currAuth;

  if(motionSensor.check_motion())
  {
     send_to_server("motion");
     Serial.println("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ!");
  }
  delay(1000);
}
