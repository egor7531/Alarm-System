import requests
import telebot
import config
import state
from urllib3.exceptions import NewConnectionError, MaxRetryError
from requests.exceptions import RequestException

bot = telebot.TeleBot(config.TELEGRAM_TOKEN)
bot.remove_webhook()

def is_admin(message):
    return message.chat.id == config.ADMIN_CHAT_ID

def check_esp32_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ESP32 —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç /ping"""
    try:
        response = requests.get(
            f"http://{config.ESP32_IP}/ping",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
            timeout=2
        )
        return response.status_code == 200 and response.text.strip() == "pong"
    except Exception as e:
        print(f"Connection check failed: {str(e)}")
        return False

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    if not is_admin(message):
        return
    
    esp32_online = check_esp32_connection()
    status = "üü¢ –æ–Ω–ª–∞–π–Ω" if esp32_online else "üî¥ –æ—Ñ–ª–∞–π–Ω"
    mode = "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π" if state.get_mode() == 'auto' else "—Ä—É—á–Ω–æ–π"
    lock_status = "–æ—Ç–∫—Ä—ã—Ç" if not state.is_locked() else "–∑–∞–∫—Ä—ã—Ç"
    
    bot.send_message(
        message.chat.id,
        f"üîë *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–º–Ω—ã–º –∑–∞–º–∫–æ–º*\n\n"
        f"‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ ESP32: {status}\n"
        f"‚Ä¢ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {mode}\n"
        f"‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–º–∫–∞: {lock_status}\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/auto - –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º\n"
        "/manual - –í–∫–ª—é—á–∏—Ç—å —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º\n"
        "/open - –û—Ç–∫—Ä—ã—Ç—å –∑–∞–º–æ–∫ (—Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º)\n"
        "/close - –ó–∞–∫—Ä—ã—Ç—å –∑–∞–º–æ–∫ (—Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º)\n"
        "/status - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
        parse_mode='Markdown'
    )

@bot.message_handler(commands=['status'])
def status_handler(message):
    if not is_admin(message):
        return
    
    esp32_online = check_esp32_connection()
    status = "üü¢ –æ–Ω–ª–∞–π–Ω" if esp32_online else "üî¥ –æ—Ñ–ª–∞–π–Ω"
    mode = "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π" if state.get_mode() == 'auto' else "—Ä—É—á–Ω–æ–π"
    lock_status = "–æ—Ç–∫—Ä—ã—Ç" if not state.is_locked() else "–∑–∞–∫—Ä—ã—Ç"
    
    bot.send_message(
        message.chat.id,
        f"üìä *–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ*\n\n"
        f"‚Ä¢ ESP32: {status}\n"
        f"‚Ä¢ –†–µ–∂–∏–º: {mode}\n"
        f"‚Ä¢ –ó–∞–º–æ–∫: {lock_status}",
        parse_mode='Markdown'
    )

@bot.message_handler(commands=['auto'])
def auto_handler(message):
    if not is_admin(message):
        return
    
    state.set_mode('auto')

    try:
        requests.get(f"http://{config.ESP32_IP}/command", 
                    params={'action': 'enableble', 'value': '1'},
                    timeout=3)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è BLE: {e}")

    bot.send_message(
        message.chat.id,
        "ü§ñ *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω*\n\n"
        "–ó–∞–º–æ–∫ —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ. "
        "–ö–æ–º–∞–Ω–¥—ã /open –∏ /close –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ.",
        parse_mode='Markdown'
    )

@bot.message_handler(commands=['manual'])
def manual_handler(message):
    if not is_admin(message):
        return
    
    state.set_mode('manual')

    try:
        requests.get(f"http://{config.ESP32_IP}/command",
                    params={'action': 'enableble', 'value': '0'},
                    timeout=3)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è BLE: {e}")

    bot.send_message(
        message.chat.id,
        "üõ† *–†—É—á–Ω–æ–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω*\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–º–∫–æ–º –≤—Ä—É—á–Ω—É—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥ "
        "/open –∏ /close.",
        parse_mode='Markdown'
    )

@bot.message_handler(commands=['open', 'close'])
def handle_lock_command(message):
    if not is_admin(message):
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞
    if state.get_mode() == 'auto':
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è *–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞*\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –≤ —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º —Å –ø–æ–º–æ—â—å—é /manual",
            parse_mode='Markdown'
        )
        return
    
    command = message.text[1:]
    action = "open" if command == "open" else "close"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (action == "open" and not state.is_locked()) or (action == "close" and state.is_locked()):
        status = "—É–∂–µ –æ—Ç–∫—Ä—ã—Ç" if action == "open" else "—É–∂–µ –∑–∞–∫—Ä—ã—Ç"
        bot.send_message(message.chat.id, f"üîí –ó–∞–º–æ–∫ {status}.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å ESP32
    if not check_esp32_connection():
        bot.send_message(message.chat.id, "‚ö†Ô∏è ESP32 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã
    try:
        response = requests.get(
            f"http://{config.ESP32_IP}/command",
            params={'action': action},
            timeout=5
        )
        
        if response.status_code == 200:
            state.set_locked(action == "close")
            emoji = "üîì" if action == "open" else "üîí"
            bot.send_message(
                message.chat.id,
                f"{emoji} *–ó–∞–º–æ–∫ {'–æ—Ç–∫—Ä—ã—Ç' if action == 'open' else '–∑–∞–∫—Ä—ã—Ç'}!*",
                parse_mode='Markdown'
            )
        else:
            bot.send_message(
                message.chat.id,
                f"‚ö†Ô∏è *–û—à–∏–±–∫–∞:* ESP32 –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}",
                parse_mode='Markdown'
            )
            
    except RequestException as e:
        error_msg = "ESP32 –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∏—Ç–∞–Ω–∏–µ –∏ —Å–µ—Ç—å." if "Connection refused" in str(e) else str(e)
        bot.send_message(
            message.chat.id,
            f"‚ö†Ô∏è *–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:* {error_msg}",
            parse_mode='Markdown'
        )

if __name__ == '__main__':
    print("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        bot.polling(none_stop=True, interval=3, timeout=30)
    except Exception as e:
        print(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")